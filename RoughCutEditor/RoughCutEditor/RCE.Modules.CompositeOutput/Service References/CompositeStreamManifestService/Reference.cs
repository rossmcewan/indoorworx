//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace RCE.Modules.CompositeOutput.CompositeStreamManifestService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SmpteFrameRate", Namespace="http://schemas.datacontract.org/2004/07/SMPTETimecode")]
    public enum SmpteFrameRate : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2398 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte24 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte25 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2997Drop = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2997NonDrop = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte30 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = -1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CompositeStreamManifestService.ICompositeStreamManifestService")]
    public interface ICompositeStreamManifestService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICompositeStreamManifestService/CreateCompositeStream", ReplyAction="http://tempuri.org/ICompositeStreamManifestService/CreateCompositeStreamResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Modules.CompositeOutput.CompositeStreamManifestService.SmpteFrameRate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<System.Uri>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Container))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.RceObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Container>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Item>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Item))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.MetadataField>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MetadataField))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Resource>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Resource))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AudioItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.ImageItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.VideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.SmoothStreamingVideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaBin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.AdOpportunity>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AdOpportunity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Comment>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Comment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Anchor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.InkComment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Marker>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Marker))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Track>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Track))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Shot>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Shot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Title>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Title))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TextBlock>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TextBlock))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TitleTemplate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Transition>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Transition))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.ExpressionEncoderMetadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.ExpressionEncoderSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.WindowsMediaHeaderProperties))]
        System.IAsyncResult BeginCreateCompositeStream(RCE.Services.Contracts.Project project, System.AsyncCallback callback, object asyncState);
        
        void EndCreateCompositeStream(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompositeStreamManifestServiceChannel : RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompositeStreamManifestServiceClient : System.ServiceModel.ClientBase<RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService>, RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService {
        
        private BeginOperationDelegate onBeginCreateCompositeStreamDelegate;
        
        private EndOperationDelegate onEndCreateCompositeStreamDelegate;
        
        private System.Threading.SendOrPostCallback onCreateCompositeStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CompositeStreamManifestServiceClient() {
        }
        
        public CompositeStreamManifestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompositeStreamManifestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompositeStreamManifestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompositeStreamManifestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateCompositeStreamCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService.BeginCreateCompositeStream(RCE.Services.Contracts.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateCompositeStream(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService.EndCreateCompositeStream(System.IAsyncResult result) {
            base.Channel.EndCreateCompositeStream(result);
        }
        
        private System.IAsyncResult OnBeginCreateCompositeStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RCE.Services.Contracts.Project project = ((RCE.Services.Contracts.Project)(inValues[0]));
            return ((RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService)(this)).BeginCreateCompositeStream(project, callback, asyncState);
        }
        
        private object[] OnEndCreateCompositeStream(System.IAsyncResult result) {
            ((RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService)(this)).EndCreateCompositeStream(result);
            return null;
        }
        
        private void OnCreateCompositeStreamCompleted(object state) {
            if ((this.CreateCompositeStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateCompositeStreamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateCompositeStreamAsync(RCE.Services.Contracts.Project project) {
            this.CreateCompositeStreamAsync(project, null);
        }
        
        public void CreateCompositeStreamAsync(RCE.Services.Contracts.Project project, object userState) {
            if ((this.onBeginCreateCompositeStreamDelegate == null)) {
                this.onBeginCreateCompositeStreamDelegate = new BeginOperationDelegate(this.OnBeginCreateCompositeStream);
            }
            if ((this.onEndCreateCompositeStreamDelegate == null)) {
                this.onEndCreateCompositeStreamDelegate = new EndOperationDelegate(this.OnEndCreateCompositeStream);
            }
            if ((this.onCreateCompositeStreamCompletedDelegate == null)) {
                this.onCreateCompositeStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateCompositeStreamCompleted);
            }
            base.InvokeAsync(this.onBeginCreateCompositeStreamDelegate, new object[] {
                        project}, this.onEndCreateCompositeStreamDelegate, this.onCreateCompositeStreamCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService CreateChannel() {
            return new CompositeStreamManifestServiceClientChannel(this);
        }
        
        private class CompositeStreamManifestServiceClientChannel : ChannelBase<RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService>, RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService {
            
            public CompositeStreamManifestServiceClientChannel(System.ServiceModel.ClientBase<RCE.Modules.CompositeOutput.CompositeStreamManifestService.ICompositeStreamManifestService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateCompositeStream(RCE.Services.Contracts.Project project, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = project;
                System.IAsyncResult _result = base.BeginInvoke("CreateCompositeStream", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateCompositeStream(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateCompositeStream", _args, result);
            }
        }
    }
}
