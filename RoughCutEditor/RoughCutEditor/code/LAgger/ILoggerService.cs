//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace LAgger.Services
{  
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "http://schemas.microsoft.com/rce/2.1/LAgger/", ConfigurationName = "Services.ILoggerService")]
    public interface ILoggerService
    {

        [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://schemas.microsoft.com/rce/2.1/LAgger/ILoggerService/LogEntries", ReplyAction = "http://schemas.microsoft.com/rce/2.1/LAgger/ILoggerService/LogEntriesResponse" +
            "")]
        System.IAsyncResult BeginLogEntries(System.Collections.ObjectModel.ObservableCollection<Entry> entries, System.AsyncCallback callback, object asyncState);

        void EndLogEntries(System.IAsyncResult result);

        [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://schemas.microsoft.com/rce/2.1/LAgger/ILoggerService/DistributeConfiguratio" +
            "n", ReplyAction = "http://schemas.microsoft.com/rce/2.1/LAgger/ILoggerService/DistributeConfiguratio" +
            "nResponse")]
        System.IAsyncResult BeginDistributeConfiguration(System.AsyncCallback callback, object asyncState);

        LoggingConfiguration EndDistributeConfiguration(System.IAsyncResult result);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ILoggerServiceChannel : ILoggerService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DistributeConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public DistributeConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public LoggingConfiguration Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((LoggingConfiguration)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class LoggerServiceClient : System.ServiceModel.ClientBase<ILoggerService>, ILoggerService
    {

        private BeginOperationDelegate onBeginLogEntriesDelegate;

        private EndOperationDelegate onEndLogEntriesDelegate;

        private System.Threading.SendOrPostCallback onLogEntriesCompletedDelegate;

        private BeginOperationDelegate onBeginDistributeConfigurationDelegate;

        private EndOperationDelegate onEndDistributeConfigurationDelegate;

        private System.Threading.SendOrPostCallback onDistributeConfigurationCompletedDelegate;

        private BeginOperationDelegate onBeginOpenDelegate;

        private EndOperationDelegate onEndOpenDelegate;

        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;

        private BeginOperationDelegate onBeginCloseDelegate;

        private EndOperationDelegate onEndCloseDelegate;

        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;

        public LoggerServiceClient()
        {
        }

        public LoggerServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public LoggerServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public LoggerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public LoggerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogEntriesCompleted;

        public event System.EventHandler<DistributeConfigurationCompletedEventArgs> DistributeConfigurationCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ILoggerService.BeginLogEntries(System.Collections.ObjectModel.ObservableCollection<Entry> entries, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginLogEntries(entries, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ILoggerService.EndLogEntries(System.IAsyncResult result)
        {
            base.Channel.EndLogEntries(result);
        }

        private System.IAsyncResult OnBeginLogEntries(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            System.Collections.ObjectModel.ObservableCollection<Entry> entries = ((System.Collections.ObjectModel.ObservableCollection<Entry>)(inValues[0]));
            return ((ILoggerService)(this)).BeginLogEntries(entries, callback, asyncState);
        }

        private object[] OnEndLogEntries(System.IAsyncResult result)
        {
            ((ILoggerService)(this)).EndLogEntries(result);
            return null;
        }

        private void OnLogEntriesCompleted(object state)
        {
            if ((this.LogEntriesCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogEntriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void LogEntriesAsync(System.Collections.ObjectModel.ObservableCollection<Entry> entries)
        {
            this.LogEntriesAsync(entries, null);
        }

        public void LogEntriesAsync(System.Collections.ObjectModel.ObservableCollection<Entry> entries, object userState)
        {
            if ((this.onBeginLogEntriesDelegate == null))
            {
                this.onBeginLogEntriesDelegate = new BeginOperationDelegate(this.OnBeginLogEntries);
            }
            if ((this.onEndLogEntriesDelegate == null))
            {
                this.onEndLogEntriesDelegate = new EndOperationDelegate(this.OnEndLogEntries);
            }
            if ((this.onLogEntriesCompletedDelegate == null))
            {
                this.onLogEntriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogEntriesCompleted);
            }
            base.InvokeAsync(this.onBeginLogEntriesDelegate, new object[] {
                        entries}, this.onEndLogEntriesDelegate, this.onLogEntriesCompletedDelegate, userState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ILoggerService.BeginDistributeConfiguration(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginDistributeConfiguration(callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LoggingConfiguration ILoggerService.EndDistributeConfiguration(System.IAsyncResult result)
        {
            return base.Channel.EndDistributeConfiguration(result);
        }

        private System.IAsyncResult OnBeginDistributeConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((ILoggerService)(this)).BeginDistributeConfiguration(callback, asyncState);
        }

        private object[] OnEndDistributeConfiguration(System.IAsyncResult result)
        {
            LoggingConfiguration retVal = ((ILoggerService)(this)).EndDistributeConfiguration(result);
            return new object[] {
                    retVal};
        }

        private void OnDistributeConfigurationCompleted(object state)
        {
            if ((this.DistributeConfigurationCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DistributeConfigurationCompleted(this, new DistributeConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void DistributeConfigurationAsync()
        {
            this.DistributeConfigurationAsync(null);
        }

        public void DistributeConfigurationAsync(object userState)
        {
            if ((this.onBeginDistributeConfigurationDelegate == null))
            {
                this.onBeginDistributeConfigurationDelegate = new BeginOperationDelegate(this.OnBeginDistributeConfiguration);
            }
            if ((this.onEndDistributeConfigurationDelegate == null))
            {
                this.onEndDistributeConfigurationDelegate = new EndOperationDelegate(this.OnEndDistributeConfiguration);
            }
            if ((this.onDistributeConfigurationCompletedDelegate == null))
            {
                this.onDistributeConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDistributeConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginDistributeConfigurationDelegate, null, this.onEndDistributeConfigurationDelegate, this.onDistributeConfigurationCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state)
        {
            if ((this.OpenCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync()
        {
            this.OpenAsync(null);
        }

        public void OpenAsync(object userState)
        {
            if ((this.onBeginOpenDelegate == null))
            {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null))
            {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null))
            {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state)
        {
            if ((this.CloseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync()
        {
            this.CloseAsync(null);
        }

        public void CloseAsync(object userState)
        {
            if ((this.onBeginCloseDelegate == null))
            {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null))
            {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null))
            {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }

        protected override ILoggerService CreateChannel()
        {
            return new LoggerServiceClientChannel(this);
        }

        private class LoggerServiceClientChannel : ChannelBase<ILoggerService>, ILoggerService
        {

            public LoggerServiceClientChannel(System.ServiceModel.ClientBase<ILoggerService> client) :
                base(client)
            {
            }

            public System.IAsyncResult BeginLogEntries(System.Collections.ObjectModel.ObservableCollection<Entry> entries, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = entries;
                System.IAsyncResult _result = base.BeginInvoke("LogEntries", _args, callback, asyncState);
                return _result;
            }

            public void EndLogEntries(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                base.EndInvoke("LogEntries", _args, result);
            }

            public System.IAsyncResult BeginDistributeConfiguration(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DistributeConfiguration", _args, callback, asyncState);
                return _result;
            }

            public LoggingConfiguration EndDistributeConfiguration(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                LoggingConfiguration _result = ((LoggingConfiguration)(base.EndInvoke("DistributeConfiguration", _args, result)));
                return _result;
            }
        }
    }
}
