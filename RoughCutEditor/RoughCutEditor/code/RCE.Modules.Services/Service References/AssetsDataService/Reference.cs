//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace RCE.Modules.Services.AssetsDataService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SmpteFrameRate", Namespace="http://schemas.datacontract.org/2004/07/SMPTETimecode")]
    public enum SmpteFrameRate : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2398 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte24 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte25 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2997Drop = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2997NonDrop = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte30 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = -1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.microsoft.com/rce/", ConfigurationName="AssetsDataService.IAssetsDataService")]
    public interface IAssetsDataService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/rce/IAssetsDataService/LoadLibraryWithLimitedItems", ReplyAction="http://schemas.microsoft.com/rce/IAssetsDataService/LoadLibraryWithLimitedItemsRe" +
            "sponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaBin))]
        System.IAsyncResult BeginLoadLibraryWithLimitedItems(int maxNumberOfItems, System.AsyncCallback callback, object asyncState);
        
        RCE.Services.Contracts.Container EndLoadLibraryWithLimitedItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/rce/IAssetsDataService/LoadLibraryFilter", ReplyAction="http://schemas.microsoft.com/rce/IAssetsDataService/LoadLibraryFilterResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaBin))]
        System.IAsyncResult BeginLoadLibraryFilter(string filter, int maxNumberOfItems, System.AsyncCallback callback, object asyncState);
        
        RCE.Services.Contracts.Container EndLoadLibraryFilter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/rce/IAssetsDataService/LoadLibraryById", ReplyAction="http://schemas.microsoft.com/rce/IAssetsDataService/LoadLibraryByIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaBin))]
        System.IAsyncResult BeginLoadLibraryById(System.Uri libraryId, int maxNumberOfItems, System.AsyncCallback callback, object asyncState);
        
        RCE.Services.Contracts.Container EndLoadLibraryById(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAssetsDataServiceChannel : RCE.Modules.Services.AssetsDataService.IAssetsDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadLibraryWithLimitedItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadLibraryWithLimitedItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RCE.Services.Contracts.Container Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((RCE.Services.Contracts.Container)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadLibraryFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadLibraryFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RCE.Services.Contracts.Container Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((RCE.Services.Contracts.Container)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadLibraryByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadLibraryByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RCE.Services.Contracts.Container Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((RCE.Services.Contracts.Container)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssetsDataServiceClient : System.ServiceModel.ClientBase<RCE.Modules.Services.AssetsDataService.IAssetsDataService>, RCE.Modules.Services.AssetsDataService.IAssetsDataService {
        
        private BeginOperationDelegate onBeginLoadLibraryWithLimitedItemsDelegate;
        
        private EndOperationDelegate onEndLoadLibraryWithLimitedItemsDelegate;
        
        private System.Threading.SendOrPostCallback onLoadLibraryWithLimitedItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadLibraryFilterDelegate;
        
        private EndOperationDelegate onEndLoadLibraryFilterDelegate;
        
        private System.Threading.SendOrPostCallback onLoadLibraryFilterCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadLibraryByIdDelegate;
        
        private EndOperationDelegate onEndLoadLibraryByIdDelegate;
        
        private System.Threading.SendOrPostCallback onLoadLibraryByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AssetsDataServiceClient() {
        }
        
        public AssetsDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AssetsDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AssetsDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AssetsDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<LoadLibraryWithLimitedItemsCompletedEventArgs> LoadLibraryWithLimitedItemsCompleted;
        
        public event System.EventHandler<LoadLibraryFilterCompletedEventArgs> LoadLibraryFilterCompleted;
        
        public event System.EventHandler<LoadLibraryByIdCompletedEventArgs> LoadLibraryByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.Services.AssetsDataService.IAssetsDataService.BeginLoadLibraryWithLimitedItems(int maxNumberOfItems, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadLibraryWithLimitedItems(maxNumberOfItems, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RCE.Services.Contracts.Container RCE.Modules.Services.AssetsDataService.IAssetsDataService.EndLoadLibraryWithLimitedItems(System.IAsyncResult result) {
            return base.Channel.EndLoadLibraryWithLimitedItems(result);
        }
        
        private System.IAsyncResult OnBeginLoadLibraryWithLimitedItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int maxNumberOfItems = ((int)(inValues[0]));
            return ((RCE.Modules.Services.AssetsDataService.IAssetsDataService)(this)).BeginLoadLibraryWithLimitedItems(maxNumberOfItems, callback, asyncState);
        }
        
        private object[] OnEndLoadLibraryWithLimitedItems(System.IAsyncResult result) {
            RCE.Services.Contracts.Container retVal = ((RCE.Modules.Services.AssetsDataService.IAssetsDataService)(this)).EndLoadLibraryWithLimitedItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadLibraryWithLimitedItemsCompleted(object state) {
            if ((this.LoadLibraryWithLimitedItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadLibraryWithLimitedItemsCompleted(this, new LoadLibraryWithLimitedItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadLibraryWithLimitedItemsAsync(int maxNumberOfItems) {
            this.LoadLibraryWithLimitedItemsAsync(maxNumberOfItems, null);
        }
        
        public void LoadLibraryWithLimitedItemsAsync(int maxNumberOfItems, object userState) {
            if ((this.onBeginLoadLibraryWithLimitedItemsDelegate == null)) {
                this.onBeginLoadLibraryWithLimitedItemsDelegate = new BeginOperationDelegate(this.OnBeginLoadLibraryWithLimitedItems);
            }
            if ((this.onEndLoadLibraryWithLimitedItemsDelegate == null)) {
                this.onEndLoadLibraryWithLimitedItemsDelegate = new EndOperationDelegate(this.OnEndLoadLibraryWithLimitedItems);
            }
            if ((this.onLoadLibraryWithLimitedItemsCompletedDelegate == null)) {
                this.onLoadLibraryWithLimitedItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadLibraryWithLimitedItemsCompleted);
            }
            base.InvokeAsync(this.onBeginLoadLibraryWithLimitedItemsDelegate, new object[] {
                        maxNumberOfItems}, this.onEndLoadLibraryWithLimitedItemsDelegate, this.onLoadLibraryWithLimitedItemsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.Services.AssetsDataService.IAssetsDataService.BeginLoadLibraryFilter(string filter, int maxNumberOfItems, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadLibraryFilter(filter, maxNumberOfItems, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RCE.Services.Contracts.Container RCE.Modules.Services.AssetsDataService.IAssetsDataService.EndLoadLibraryFilter(System.IAsyncResult result) {
            return base.Channel.EndLoadLibraryFilter(result);
        }
        
        private System.IAsyncResult OnBeginLoadLibraryFilter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filter = ((string)(inValues[0]));
            int maxNumberOfItems = ((int)(inValues[1]));
            return ((RCE.Modules.Services.AssetsDataService.IAssetsDataService)(this)).BeginLoadLibraryFilter(filter, maxNumberOfItems, callback, asyncState);
        }
        
        private object[] OnEndLoadLibraryFilter(System.IAsyncResult result) {
            RCE.Services.Contracts.Container retVal = ((RCE.Modules.Services.AssetsDataService.IAssetsDataService)(this)).EndLoadLibraryFilter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadLibraryFilterCompleted(object state) {
            if ((this.LoadLibraryFilterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadLibraryFilterCompleted(this, new LoadLibraryFilterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadLibraryFilterAsync(string filter, int maxNumberOfItems) {
            this.LoadLibraryFilterAsync(filter, maxNumberOfItems, null);
        }
        
        public void LoadLibraryFilterAsync(string filter, int maxNumberOfItems, object userState) {
            if ((this.onBeginLoadLibraryFilterDelegate == null)) {
                this.onBeginLoadLibraryFilterDelegate = new BeginOperationDelegate(this.OnBeginLoadLibraryFilter);
            }
            if ((this.onEndLoadLibraryFilterDelegate == null)) {
                this.onEndLoadLibraryFilterDelegate = new EndOperationDelegate(this.OnEndLoadLibraryFilter);
            }
            if ((this.onLoadLibraryFilterCompletedDelegate == null)) {
                this.onLoadLibraryFilterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadLibraryFilterCompleted);
            }
            base.InvokeAsync(this.onBeginLoadLibraryFilterDelegate, new object[] {
                        filter,
                        maxNumberOfItems}, this.onEndLoadLibraryFilterDelegate, this.onLoadLibraryFilterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.Services.AssetsDataService.IAssetsDataService.BeginLoadLibraryById(System.Uri libraryId, int maxNumberOfItems, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadLibraryById(libraryId, maxNumberOfItems, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RCE.Services.Contracts.Container RCE.Modules.Services.AssetsDataService.IAssetsDataService.EndLoadLibraryById(System.IAsyncResult result) {
            return base.Channel.EndLoadLibraryById(result);
        }
        
        private System.IAsyncResult OnBeginLoadLibraryById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Uri libraryId = ((System.Uri)(inValues[0]));
            int maxNumberOfItems = ((int)(inValues[1]));
            return ((RCE.Modules.Services.AssetsDataService.IAssetsDataService)(this)).BeginLoadLibraryById(libraryId, maxNumberOfItems, callback, asyncState);
        }
        
        private object[] OnEndLoadLibraryById(System.IAsyncResult result) {
            RCE.Services.Contracts.Container retVal = ((RCE.Modules.Services.AssetsDataService.IAssetsDataService)(this)).EndLoadLibraryById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadLibraryByIdCompleted(object state) {
            if ((this.LoadLibraryByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadLibraryByIdCompleted(this, new LoadLibraryByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadLibraryByIdAsync(System.Uri libraryId, int maxNumberOfItems) {
            this.LoadLibraryByIdAsync(libraryId, maxNumberOfItems, null);
        }
        
        public void LoadLibraryByIdAsync(System.Uri libraryId, int maxNumberOfItems, object userState) {
            if ((this.onBeginLoadLibraryByIdDelegate == null)) {
                this.onBeginLoadLibraryByIdDelegate = new BeginOperationDelegate(this.OnBeginLoadLibraryById);
            }
            if ((this.onEndLoadLibraryByIdDelegate == null)) {
                this.onEndLoadLibraryByIdDelegate = new EndOperationDelegate(this.OnEndLoadLibraryById);
            }
            if ((this.onLoadLibraryByIdCompletedDelegate == null)) {
                this.onLoadLibraryByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadLibraryByIdCompleted);
            }
            base.InvokeAsync(this.onBeginLoadLibraryByIdDelegate, new object[] {
                        libraryId,
                        maxNumberOfItems}, this.onEndLoadLibraryByIdDelegate, this.onLoadLibraryByIdCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override RCE.Modules.Services.AssetsDataService.IAssetsDataService CreateChannel() {
            return new AssetsDataServiceClientChannel(this);
        }
        
        private class AssetsDataServiceClientChannel : ChannelBase<RCE.Modules.Services.AssetsDataService.IAssetsDataService>, RCE.Modules.Services.AssetsDataService.IAssetsDataService {
            
            public AssetsDataServiceClientChannel(System.ServiceModel.ClientBase<RCE.Modules.Services.AssetsDataService.IAssetsDataService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLoadLibraryWithLimitedItems(int maxNumberOfItems, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = maxNumberOfItems;
                System.IAsyncResult _result = base.BeginInvoke("LoadLibraryWithLimitedItems", _args, callback, asyncState);
                return _result;
            }
            
            public RCE.Services.Contracts.Container EndLoadLibraryWithLimitedItems(System.IAsyncResult result) {
                object[] _args = new object[0];
                RCE.Services.Contracts.Container _result = ((RCE.Services.Contracts.Container)(base.EndInvoke("LoadLibraryWithLimitedItems", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoadLibraryFilter(string filter, int maxNumberOfItems, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = filter;
                _args[1] = maxNumberOfItems;
                System.IAsyncResult _result = base.BeginInvoke("LoadLibraryFilter", _args, callback, asyncState);
                return _result;
            }
            
            public RCE.Services.Contracts.Container EndLoadLibraryFilter(System.IAsyncResult result) {
                object[] _args = new object[0];
                RCE.Services.Contracts.Container _result = ((RCE.Services.Contracts.Container)(base.EndInvoke("LoadLibraryFilter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoadLibraryById(System.Uri libraryId, int maxNumberOfItems, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = libraryId;
                _args[1] = maxNumberOfItems;
                System.IAsyncResult _result = base.BeginInvoke("LoadLibraryById", _args, callback, asyncState);
                return _result;
            }
            
            public RCE.Services.Contracts.Container EndLoadLibraryById(System.IAsyncResult result) {
                object[] _args = new object[0];
                RCE.Services.Contracts.Container _result = ((RCE.Services.Contracts.Container)(base.EndInvoke("LoadLibraryById", _args, result)));
                return _result;
            }
        }
    }
}
