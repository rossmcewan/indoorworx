//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace RCE.Modules.Services.DataService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SmpteFrameRate", Namespace="http://schemas.datacontract.org/2004/07/SMPTETimecode")]
    public enum SmpteFrameRate : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2398 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte24 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte25 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2997Drop = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte2997NonDrop = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Smpte30 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = -1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.microsoft.com/rce/", ConfigurationName="DataService.IDataService")]
    public interface IDataService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/rce/IDataService/LoadMediaBin", ReplyAction="http://schemas.microsoft.com/rce/IDataService/LoadMediaBinResponse")]
        System.IAsyncResult BeginLoadMediaBin(System.Uri mediaBinUri, System.AsyncCallback callback, object asyncState);
        
        RCE.Services.Contracts.MediaBin EndLoadMediaBin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/rce/IDataService/LoadTitleTemplates", ReplyAction="http://schemas.microsoft.com/rce/IDataService/LoadTitleTemplatesResponse")]
        System.IAsyncResult BeginLoadTitleTemplates(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate> EndLoadTitleTemplates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/rce/IDataService/LoadProject", ReplyAction="http://schemas.microsoft.com/rce/IDataService/LoadProjectResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaBin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Container))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.RceObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Container>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Item>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Item))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.MetadataField>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MetadataField))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Resource>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Resource))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.VideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.SmoothStreamingVideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.ImageItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AudioItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TitleTemplate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.AdOpportunity>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AdOpportunity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Comment>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Comment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Anchor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.InkComment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Marker>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Marker))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Track>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Track))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Shot>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Shot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Title>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Title))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TextBlock>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TextBlock))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Transition>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Transition))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.ExpressionEncoderMetadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.ExpressionEncoderSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.WindowsMediaHeaderProperties))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Modules.Services.DataService.SmpteFrameRate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<System.Uri>))]
        System.IAsyncResult BeginLoadProject(System.Uri site, System.AsyncCallback callback, object asyncState);
        
        RCE.Services.Contracts.Project EndLoadProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/rce/IDataService/SaveProject", ReplyAction="http://schemas.microsoft.com/rce/IDataService/SaveProjectResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaBin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Container))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.RceObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Container>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Item>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Item))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.MetadataField>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MetadataField))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Resource>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Resource))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.VideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.SmoothStreamingVideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.ImageItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AudioItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TitleTemplate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.AdOpportunity>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AdOpportunity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Comment>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Comment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Anchor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.InkComment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Marker>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Marker))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Track>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Track))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Shot>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Shot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Title>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Title))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TextBlock>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TextBlock))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Transition>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Transition))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.ExpressionEncoderMetadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.ExpressionEncoderSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.WindowsMediaHeaderProperties))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Modules.Services.DataService.SmpteFrameRate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<System.Uri>))]
        System.IAsyncResult BeginSaveProject(RCE.Services.Contracts.Project project, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/rce/IDataService/GetProjectsByUser", ReplyAction="http://schemas.microsoft.com/rce/IDataService/GetProjectsByUserResponse")]
        System.IAsyncResult BeginGetProjectsByUser(string userName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project> EndGetProjectsByUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/rce/IDataService/GetProject", ReplyAction="http://schemas.microsoft.com/rce/IDataService/GetProjectResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaBin))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Container))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.RceObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Container>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Item>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Item))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.MetadataField>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MetadataField))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Resource>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Resource))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.VideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.MediaItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.SmoothStreamingVideoItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.ImageItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AudioItem))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TitleTemplate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.AdOpportunity>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.AdOpportunity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Comment>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Comment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Anchor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.InkComment))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Marker>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Marker))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Track>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Track))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Shot>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Shot))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Title>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Title))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TextBlock>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.TextBlock))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Transition>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Transition))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.ExpressionEncoderMetadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.ExpressionEncoderSettings))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Services.Contracts.Output.WindowsMediaHeaderProperties))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RCE.Modules.Services.DataService.SmpteFrameRate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<System.Uri>))]
        System.IAsyncResult BeginGetProject(string projectId, System.AsyncCallback callback, object asyncState);
        
        RCE.Services.Contracts.Project EndGetProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://schemas.microsoft.com/rce/IDataService/DeleteProject", ReplyAction="http://schemas.microsoft.com/rce/IDataService/DeleteProjectResponse")]
        System.IAsyncResult BeginDeleteProject(System.Uri site, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteProject(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataServiceChannel : RCE.Modules.Services.DataService.IDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadMediaBinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadMediaBinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RCE.Services.Contracts.MediaBin Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((RCE.Services.Contracts.MediaBin)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadTitleTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadTitleTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RCE.Services.Contracts.Project Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((RCE.Services.Contracts.Project)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProjectsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProjectsByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RCE.Services.Contracts.Project Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((RCE.Services.Contracts.Project)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<RCE.Modules.Services.DataService.IDataService>, RCE.Modules.Services.DataService.IDataService {
        
        private BeginOperationDelegate onBeginLoadMediaBinDelegate;
        
        private EndOperationDelegate onEndLoadMediaBinDelegate;
        
        private System.Threading.SendOrPostCallback onLoadMediaBinCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadTitleTemplatesDelegate;
        
        private EndOperationDelegate onEndLoadTitleTemplatesDelegate;
        
        private System.Threading.SendOrPostCallback onLoadTitleTemplatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadProjectDelegate;
        
        private EndOperationDelegate onEndLoadProjectDelegate;
        
        private System.Threading.SendOrPostCallback onLoadProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveProjectDelegate;
        
        private EndOperationDelegate onEndSaveProjectDelegate;
        
        private System.Threading.SendOrPostCallback onSaveProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProjectsByUserDelegate;
        
        private EndOperationDelegate onEndGetProjectsByUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetProjectsByUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProjectDelegate;
        
        private EndOperationDelegate onEndGetProjectDelegate;
        
        private System.Threading.SendOrPostCallback onGetProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteProjectDelegate;
        
        private EndOperationDelegate onEndDeleteProjectDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<LoadMediaBinCompletedEventArgs> LoadMediaBinCompleted;
        
        public event System.EventHandler<LoadTitleTemplatesCompletedEventArgs> LoadTitleTemplatesCompleted;
        
        public event System.EventHandler<LoadProjectCompletedEventArgs> LoadProjectCompleted;
        
        public event System.EventHandler<SaveProjectCompletedEventArgs> SaveProjectCompleted;
        
        public event System.EventHandler<GetProjectsByUserCompletedEventArgs> GetProjectsByUserCompleted;
        
        public event System.EventHandler<GetProjectCompletedEventArgs> GetProjectCompleted;
        
        public event System.EventHandler<DeleteProjectCompletedEventArgs> DeleteProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.Services.DataService.IDataService.BeginLoadMediaBin(System.Uri mediaBinUri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadMediaBin(mediaBinUri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RCE.Services.Contracts.MediaBin RCE.Modules.Services.DataService.IDataService.EndLoadMediaBin(System.IAsyncResult result) {
            return base.Channel.EndLoadMediaBin(result);
        }
        
        private System.IAsyncResult OnBeginLoadMediaBin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Uri mediaBinUri = ((System.Uri)(inValues[0]));
            return ((RCE.Modules.Services.DataService.IDataService)(this)).BeginLoadMediaBin(mediaBinUri, callback, asyncState);
        }
        
        private object[] OnEndLoadMediaBin(System.IAsyncResult result) {
            RCE.Services.Contracts.MediaBin retVal = ((RCE.Modules.Services.DataService.IDataService)(this)).EndLoadMediaBin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadMediaBinCompleted(object state) {
            if ((this.LoadMediaBinCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadMediaBinCompleted(this, new LoadMediaBinCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadMediaBinAsync(System.Uri mediaBinUri) {
            this.LoadMediaBinAsync(mediaBinUri, null);
        }
        
        public void LoadMediaBinAsync(System.Uri mediaBinUri, object userState) {
            if ((this.onBeginLoadMediaBinDelegate == null)) {
                this.onBeginLoadMediaBinDelegate = new BeginOperationDelegate(this.OnBeginLoadMediaBin);
            }
            if ((this.onEndLoadMediaBinDelegate == null)) {
                this.onEndLoadMediaBinDelegate = new EndOperationDelegate(this.OnEndLoadMediaBin);
            }
            if ((this.onLoadMediaBinCompletedDelegate == null)) {
                this.onLoadMediaBinCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadMediaBinCompleted);
            }
            base.InvokeAsync(this.onBeginLoadMediaBinDelegate, new object[] {
                        mediaBinUri}, this.onEndLoadMediaBinDelegate, this.onLoadMediaBinCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.Services.DataService.IDataService.BeginLoadTitleTemplates(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadTitleTemplates(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate> RCE.Modules.Services.DataService.IDataService.EndLoadTitleTemplates(System.IAsyncResult result) {
            return base.Channel.EndLoadTitleTemplates(result);
        }
        
        private System.IAsyncResult OnBeginLoadTitleTemplates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((RCE.Modules.Services.DataService.IDataService)(this)).BeginLoadTitleTemplates(callback, asyncState);
        }
        
        private object[] OnEndLoadTitleTemplates(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate> retVal = ((RCE.Modules.Services.DataService.IDataService)(this)).EndLoadTitleTemplates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadTitleTemplatesCompleted(object state) {
            if ((this.LoadTitleTemplatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadTitleTemplatesCompleted(this, new LoadTitleTemplatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadTitleTemplatesAsync() {
            this.LoadTitleTemplatesAsync(null);
        }
        
        public void LoadTitleTemplatesAsync(object userState) {
            if ((this.onBeginLoadTitleTemplatesDelegate == null)) {
                this.onBeginLoadTitleTemplatesDelegate = new BeginOperationDelegate(this.OnBeginLoadTitleTemplates);
            }
            if ((this.onEndLoadTitleTemplatesDelegate == null)) {
                this.onEndLoadTitleTemplatesDelegate = new EndOperationDelegate(this.OnEndLoadTitleTemplates);
            }
            if ((this.onLoadTitleTemplatesCompletedDelegate == null)) {
                this.onLoadTitleTemplatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadTitleTemplatesCompleted);
            }
            base.InvokeAsync(this.onBeginLoadTitleTemplatesDelegate, null, this.onEndLoadTitleTemplatesDelegate, this.onLoadTitleTemplatesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.Services.DataService.IDataService.BeginLoadProject(System.Uri site, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadProject(site, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RCE.Services.Contracts.Project RCE.Modules.Services.DataService.IDataService.EndLoadProject(System.IAsyncResult result) {
            return base.Channel.EndLoadProject(result);
        }
        
        private System.IAsyncResult OnBeginLoadProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Uri site = ((System.Uri)(inValues[0]));
            return ((RCE.Modules.Services.DataService.IDataService)(this)).BeginLoadProject(site, callback, asyncState);
        }
        
        private object[] OnEndLoadProject(System.IAsyncResult result) {
            RCE.Services.Contracts.Project retVal = ((RCE.Modules.Services.DataService.IDataService)(this)).EndLoadProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadProjectCompleted(object state) {
            if ((this.LoadProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadProjectCompleted(this, new LoadProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadProjectAsync(System.Uri site) {
            this.LoadProjectAsync(site, null);
        }
        
        public void LoadProjectAsync(System.Uri site, object userState) {
            if ((this.onBeginLoadProjectDelegate == null)) {
                this.onBeginLoadProjectDelegate = new BeginOperationDelegate(this.OnBeginLoadProject);
            }
            if ((this.onEndLoadProjectDelegate == null)) {
                this.onEndLoadProjectDelegate = new EndOperationDelegate(this.OnEndLoadProject);
            }
            if ((this.onLoadProjectCompletedDelegate == null)) {
                this.onLoadProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadProjectCompleted);
            }
            base.InvokeAsync(this.onBeginLoadProjectDelegate, new object[] {
                        site}, this.onEndLoadProjectDelegate, this.onLoadProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.Services.DataService.IDataService.BeginSaveProject(RCE.Services.Contracts.Project project, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool RCE.Modules.Services.DataService.IDataService.EndSaveProject(System.IAsyncResult result) {
            return base.Channel.EndSaveProject(result);
        }
        
        private System.IAsyncResult OnBeginSaveProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RCE.Services.Contracts.Project project = ((RCE.Services.Contracts.Project)(inValues[0]));
            return ((RCE.Modules.Services.DataService.IDataService)(this)).BeginSaveProject(project, callback, asyncState);
        }
        
        private object[] OnEndSaveProject(System.IAsyncResult result) {
            bool retVal = ((RCE.Modules.Services.DataService.IDataService)(this)).EndSaveProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveProjectCompleted(object state) {
            if ((this.SaveProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveProjectCompleted(this, new SaveProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveProjectAsync(RCE.Services.Contracts.Project project) {
            this.SaveProjectAsync(project, null);
        }
        
        public void SaveProjectAsync(RCE.Services.Contracts.Project project, object userState) {
            if ((this.onBeginSaveProjectDelegate == null)) {
                this.onBeginSaveProjectDelegate = new BeginOperationDelegate(this.OnBeginSaveProject);
            }
            if ((this.onEndSaveProjectDelegate == null)) {
                this.onEndSaveProjectDelegate = new EndOperationDelegate(this.OnEndSaveProject);
            }
            if ((this.onSaveProjectCompletedDelegate == null)) {
                this.onSaveProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveProjectCompleted);
            }
            base.InvokeAsync(this.onBeginSaveProjectDelegate, new object[] {
                        project}, this.onEndSaveProjectDelegate, this.onSaveProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.Services.DataService.IDataService.BeginGetProjectsByUser(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProjectsByUser(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project> RCE.Modules.Services.DataService.IDataService.EndGetProjectsByUser(System.IAsyncResult result) {
            return base.Channel.EndGetProjectsByUser(result);
        }
        
        private System.IAsyncResult OnBeginGetProjectsByUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return ((RCE.Modules.Services.DataService.IDataService)(this)).BeginGetProjectsByUser(userName, callback, asyncState);
        }
        
        private object[] OnEndGetProjectsByUser(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project> retVal = ((RCE.Modules.Services.DataService.IDataService)(this)).EndGetProjectsByUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProjectsByUserCompleted(object state) {
            if ((this.GetProjectsByUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProjectsByUserCompleted(this, new GetProjectsByUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProjectsByUserAsync(string userName) {
            this.GetProjectsByUserAsync(userName, null);
        }
        
        public void GetProjectsByUserAsync(string userName, object userState) {
            if ((this.onBeginGetProjectsByUserDelegate == null)) {
                this.onBeginGetProjectsByUserDelegate = new BeginOperationDelegate(this.OnBeginGetProjectsByUser);
            }
            if ((this.onEndGetProjectsByUserDelegate == null)) {
                this.onEndGetProjectsByUserDelegate = new EndOperationDelegate(this.OnEndGetProjectsByUser);
            }
            if ((this.onGetProjectsByUserCompletedDelegate == null)) {
                this.onGetProjectsByUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProjectsByUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetProjectsByUserDelegate, new object[] {
                        userName}, this.onEndGetProjectsByUserDelegate, this.onGetProjectsByUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.Services.DataService.IDataService.BeginGetProject(string projectId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProject(projectId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        RCE.Services.Contracts.Project RCE.Modules.Services.DataService.IDataService.EndGetProject(System.IAsyncResult result) {
            return base.Channel.EndGetProject(result);
        }
        
        private System.IAsyncResult OnBeginGetProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string projectId = ((string)(inValues[0]));
            return ((RCE.Modules.Services.DataService.IDataService)(this)).BeginGetProject(projectId, callback, asyncState);
        }
        
        private object[] OnEndGetProject(System.IAsyncResult result) {
            RCE.Services.Contracts.Project retVal = ((RCE.Modules.Services.DataService.IDataService)(this)).EndGetProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProjectCompleted(object state) {
            if ((this.GetProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProjectCompleted(this, new GetProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProjectAsync(string projectId) {
            this.GetProjectAsync(projectId, null);
        }
        
        public void GetProjectAsync(string projectId, object userState) {
            if ((this.onBeginGetProjectDelegate == null)) {
                this.onBeginGetProjectDelegate = new BeginOperationDelegate(this.OnBeginGetProject);
            }
            if ((this.onEndGetProjectDelegate == null)) {
                this.onEndGetProjectDelegate = new EndOperationDelegate(this.OnEndGetProject);
            }
            if ((this.onGetProjectCompletedDelegate == null)) {
                this.onGetProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProjectCompleted);
            }
            base.InvokeAsync(this.onBeginGetProjectDelegate, new object[] {
                        projectId}, this.onEndGetProjectDelegate, this.onGetProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult RCE.Modules.Services.DataService.IDataService.BeginDeleteProject(System.Uri site, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteProject(site, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool RCE.Modules.Services.DataService.IDataService.EndDeleteProject(System.IAsyncResult result) {
            return base.Channel.EndDeleteProject(result);
        }
        
        private System.IAsyncResult OnBeginDeleteProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Uri site = ((System.Uri)(inValues[0]));
            return ((RCE.Modules.Services.DataService.IDataService)(this)).BeginDeleteProject(site, callback, asyncState);
        }
        
        private object[] OnEndDeleteProject(System.IAsyncResult result) {
            bool retVal = ((RCE.Modules.Services.DataService.IDataService)(this)).EndDeleteProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteProjectCompleted(object state) {
            if ((this.DeleteProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteProjectCompleted(this, new DeleteProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteProjectAsync(System.Uri site) {
            this.DeleteProjectAsync(site, null);
        }
        
        public void DeleteProjectAsync(System.Uri site, object userState) {
            if ((this.onBeginDeleteProjectDelegate == null)) {
                this.onBeginDeleteProjectDelegate = new BeginOperationDelegate(this.OnBeginDeleteProject);
            }
            if ((this.onEndDeleteProjectDelegate == null)) {
                this.onEndDeleteProjectDelegate = new EndOperationDelegate(this.OnEndDeleteProject);
            }
            if ((this.onDeleteProjectCompletedDelegate == null)) {
                this.onDeleteProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteProjectCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteProjectDelegate, new object[] {
                        site}, this.onEndDeleteProjectDelegate, this.onDeleteProjectCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override RCE.Modules.Services.DataService.IDataService CreateChannel() {
            return new DataServiceClientChannel(this);
        }
        
        private class DataServiceClientChannel : ChannelBase<RCE.Modules.Services.DataService.IDataService>, RCE.Modules.Services.DataService.IDataService {
            
            public DataServiceClientChannel(System.ServiceModel.ClientBase<RCE.Modules.Services.DataService.IDataService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLoadMediaBin(System.Uri mediaBinUri, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = mediaBinUri;
                System.IAsyncResult _result = base.BeginInvoke("LoadMediaBin", _args, callback, asyncState);
                return _result;
            }
            
            public RCE.Services.Contracts.MediaBin EndLoadMediaBin(System.IAsyncResult result) {
                object[] _args = new object[0];
                RCE.Services.Contracts.MediaBin _result = ((RCE.Services.Contracts.MediaBin)(base.EndInvoke("LoadMediaBin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoadTitleTemplates(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("LoadTitleTemplates", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate> EndLoadTitleTemplates(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate> _result = ((System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.TitleTemplate>)(base.EndInvoke("LoadTitleTemplates", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoadProject(System.Uri site, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = site;
                System.IAsyncResult _result = base.BeginInvoke("LoadProject", _args, callback, asyncState);
                return _result;
            }
            
            public RCE.Services.Contracts.Project EndLoadProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                RCE.Services.Contracts.Project _result = ((RCE.Services.Contracts.Project)(base.EndInvoke("LoadProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveProject(RCE.Services.Contracts.Project project, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = project;
                System.IAsyncResult _result = base.BeginInvoke("SaveProject", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSaveProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SaveProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetProjectsByUser(string userName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userName;
                System.IAsyncResult _result = base.BeginInvoke("GetProjectsByUser", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project> EndGetProjectsByUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project> _result = ((System.Collections.ObjectModel.ObservableCollection<RCE.Services.Contracts.Project>)(base.EndInvoke("GetProjectsByUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetProject(string projectId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = projectId;
                System.IAsyncResult _result = base.BeginInvoke("GetProject", _args, callback, asyncState);
                return _result;
            }
            
            public RCE.Services.Contracts.Project EndGetProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                RCE.Services.Contracts.Project _result = ((RCE.Services.Contracts.Project)(base.EndInvoke("GetProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteProject(System.Uri site, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = site;
                System.IAsyncResult _result = base.BeginInvoke("DeleteProject", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteProject(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteProject", _args, result)));
                return _result;
            }
        }
    }
}
