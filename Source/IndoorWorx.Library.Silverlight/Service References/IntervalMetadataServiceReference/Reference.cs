//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace IndoorWorx.Library.IntervalMetadataServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IntervalMetadataServiceReference.IIntervalMetadataService")]
    public interface IIntervalMetadataService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IIntervalMetadataService/FetchIntervalLevels", ReplyAction="http://tempuri.org/IIntervalMetadataService/FetchIntervalLevelsResponse")]
        System.IAsyncResult BeginFetchIntervalLevels(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalLevel> EndFetchIntervalLevels(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IIntervalMetadataService/FetchIntervalTypes", ReplyAction="http://tempuri.org/IIntervalMetadataService/FetchIntervalTypesResponse")]
        System.IAsyncResult BeginFetchIntervalTypes(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalType> EndFetchIntervalTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IIntervalMetadataService/FetchEffortTypes", ReplyAction="http://tempuri.org/IIntervalMetadataService/FetchEffortTypesResponse")]
        System.IAsyncResult BeginFetchEffortTypes(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EffortType> EndFetchEffortTypes(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIntervalMetadataServiceChannel : IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchIntervalLevelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchIntervalLevelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalLevel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalLevel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchIntervalTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchIntervalTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalType> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalType>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchEffortTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchEffortTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EffortType> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EffortType>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IntervalMetadataServiceClient : System.ServiceModel.ClientBase<IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService>, IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService {
        
        private BeginOperationDelegate onBeginFetchIntervalLevelsDelegate;
        
        private EndOperationDelegate onEndFetchIntervalLevelsDelegate;
        
        private System.Threading.SendOrPostCallback onFetchIntervalLevelsCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchIntervalTypesDelegate;
        
        private EndOperationDelegate onEndFetchIntervalTypesDelegate;
        
        private System.Threading.SendOrPostCallback onFetchIntervalTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchEffortTypesDelegate;
        
        private EndOperationDelegate onEndFetchEffortTypesDelegate;
        
        private System.Threading.SendOrPostCallback onFetchEffortTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public IntervalMetadataServiceClient() {
        }
        
        public IntervalMetadataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IntervalMetadataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IntervalMetadataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IntervalMetadataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<FetchIntervalLevelsCompletedEventArgs> FetchIntervalLevelsCompleted;
        
        public event System.EventHandler<FetchIntervalTypesCompletedEventArgs> FetchIntervalTypesCompleted;
        
        public event System.EventHandler<FetchEffortTypesCompletedEventArgs> FetchEffortTypesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService.BeginFetchIntervalLevels(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchIntervalLevels(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalLevel> IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService.EndFetchIntervalLevels(System.IAsyncResult result) {
            return base.Channel.EndFetchIntervalLevels(result);
        }
        
        private System.IAsyncResult OnBeginFetchIntervalLevels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService)(this)).BeginFetchIntervalLevels(callback, asyncState);
        }
        
        private object[] OnEndFetchIntervalLevels(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalLevel> retVal = ((IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService)(this)).EndFetchIntervalLevels(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchIntervalLevelsCompleted(object state) {
            if ((this.FetchIntervalLevelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchIntervalLevelsCompleted(this, new FetchIntervalLevelsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchIntervalLevelsAsync() {
            this.FetchIntervalLevelsAsync(null);
        }
        
        public void FetchIntervalLevelsAsync(object userState) {
            if ((this.onBeginFetchIntervalLevelsDelegate == null)) {
                this.onBeginFetchIntervalLevelsDelegate = new BeginOperationDelegate(this.OnBeginFetchIntervalLevels);
            }
            if ((this.onEndFetchIntervalLevelsDelegate == null)) {
                this.onEndFetchIntervalLevelsDelegate = new EndOperationDelegate(this.OnEndFetchIntervalLevels);
            }
            if ((this.onFetchIntervalLevelsCompletedDelegate == null)) {
                this.onFetchIntervalLevelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchIntervalLevelsCompleted);
            }
            base.InvokeAsync(this.onBeginFetchIntervalLevelsDelegate, null, this.onEndFetchIntervalLevelsDelegate, this.onFetchIntervalLevelsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService.BeginFetchIntervalTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchIntervalTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalType> IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService.EndFetchIntervalTypes(System.IAsyncResult result) {
            return base.Channel.EndFetchIntervalTypes(result);
        }
        
        private System.IAsyncResult OnBeginFetchIntervalTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService)(this)).BeginFetchIntervalTypes(callback, asyncState);
        }
        
        private object[] OnEndFetchIntervalTypes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalType> retVal = ((IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService)(this)).EndFetchIntervalTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchIntervalTypesCompleted(object state) {
            if ((this.FetchIntervalTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchIntervalTypesCompleted(this, new FetchIntervalTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchIntervalTypesAsync() {
            this.FetchIntervalTypesAsync(null);
        }
        
        public void FetchIntervalTypesAsync(object userState) {
            if ((this.onBeginFetchIntervalTypesDelegate == null)) {
                this.onBeginFetchIntervalTypesDelegate = new BeginOperationDelegate(this.OnBeginFetchIntervalTypes);
            }
            if ((this.onEndFetchIntervalTypesDelegate == null)) {
                this.onEndFetchIntervalTypesDelegate = new EndOperationDelegate(this.OnEndFetchIntervalTypes);
            }
            if ((this.onFetchIntervalTypesCompletedDelegate == null)) {
                this.onFetchIntervalTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchIntervalTypesCompleted);
            }
            base.InvokeAsync(this.onBeginFetchIntervalTypesDelegate, null, this.onEndFetchIntervalTypesDelegate, this.onFetchIntervalTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService.BeginFetchEffortTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchEffortTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EffortType> IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService.EndFetchEffortTypes(System.IAsyncResult result) {
            return base.Channel.EndFetchEffortTypes(result);
        }
        
        private System.IAsyncResult OnBeginFetchEffortTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService)(this)).BeginFetchEffortTypes(callback, asyncState);
        }
        
        private object[] OnEndFetchEffortTypes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EffortType> retVal = ((IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService)(this)).EndFetchEffortTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchEffortTypesCompleted(object state) {
            if ((this.FetchEffortTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchEffortTypesCompleted(this, new FetchEffortTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchEffortTypesAsync() {
            this.FetchEffortTypesAsync(null);
        }
        
        public void FetchEffortTypesAsync(object userState) {
            if ((this.onBeginFetchEffortTypesDelegate == null)) {
                this.onBeginFetchEffortTypesDelegate = new BeginOperationDelegate(this.OnBeginFetchEffortTypes);
            }
            if ((this.onEndFetchEffortTypesDelegate == null)) {
                this.onEndFetchEffortTypesDelegate = new EndOperationDelegate(this.OnEndFetchEffortTypes);
            }
            if ((this.onFetchEffortTypesCompletedDelegate == null)) {
                this.onFetchEffortTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchEffortTypesCompleted);
            }
            base.InvokeAsync(this.onBeginFetchEffortTypesDelegate, null, this.onEndFetchEffortTypesDelegate, this.onFetchEffortTypesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService CreateChannel() {
            return new IntervalMetadataServiceClientChannel(this);
        }
        
        private class IntervalMetadataServiceClientChannel : ChannelBase<IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService>, IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService {
            
            public IntervalMetadataServiceClientChannel(System.ServiceModel.ClientBase<IndoorWorx.Library.IntervalMetadataServiceReference.IIntervalMetadataService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginFetchIntervalLevels(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("FetchIntervalLevels", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalLevel> EndFetchIntervalLevels(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalLevel> _result = ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalLevel>)(base.EndInvoke("FetchIntervalLevels", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchIntervalTypes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("FetchIntervalTypes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalType> EndFetchIntervalTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalType> _result = ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.IntervalType>)(base.EndInvoke("FetchIntervalTypes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchEffortTypes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("FetchEffortTypes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EffortType> EndFetchEffortTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EffortType> _result = ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EffortType>)(base.EndInvoke("FetchEffortTypes", _args, result)));
                return _result;
            }
        }
    }
}
