//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace IndoorWorx.Library.ActivityServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ActivityServiceReference.IActivityService")]
    public interface IActivityService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/RetrieveAllActivityTypes", ReplyAction="http://tempuri.org/IActivityService/RetrieveAllActivityTypesResponse")]
        System.IAsyncResult BeginRetrieveAllActivityTypes(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.ActivityType> EndRetrieveAllActivityTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/RetrieveAllEquipment", ReplyAction="http://tempuri.org/IActivityService/RetrieveAllEquipmentResponse")]
        System.IAsyncResult BeginRetrieveAllEquipment(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Equipment> EndRetrieveAllEquipment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/RetrieveAllEquipmentFeatures", ReplyAction="http://tempuri.org/IActivityService/RetrieveAllEquipmentFeaturesResponse")]
        System.IAsyncResult BeginRetrieveAllEquipmentFeatures(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EquipmentFeatures> EndRetrieveAllEquipmentFeatures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/RetrieveAllManufacturers", ReplyAction="http://tempuri.org/IActivityService/RetrieveAllManufacturersResponse")]
        System.IAsyncResult BeginRetrieveAllManufacturers(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Manufacturer> EndRetrieveAllManufacturers(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IActivityServiceChannel : IndoorWorx.Library.ActivityServiceReference.IActivityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveAllActivityTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveAllActivityTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.ActivityType> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.ActivityType>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveAllEquipmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveAllEquipmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Equipment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Equipment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveAllEquipmentFeaturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveAllEquipmentFeaturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EquipmentFeatures> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EquipmentFeatures>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveAllManufacturersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RetrieveAllManufacturersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Manufacturer> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Manufacturer>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActivityServiceClient : System.ServiceModel.ClientBase<IndoorWorx.Library.ActivityServiceReference.IActivityService>, IndoorWorx.Library.ActivityServiceReference.IActivityService {
        
        private BeginOperationDelegate onBeginRetrieveAllActivityTypesDelegate;
        
        private EndOperationDelegate onEndRetrieveAllActivityTypesDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveAllActivityTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveAllEquipmentDelegate;
        
        private EndOperationDelegate onEndRetrieveAllEquipmentDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveAllEquipmentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveAllEquipmentFeaturesDelegate;
        
        private EndOperationDelegate onEndRetrieveAllEquipmentFeaturesDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveAllEquipmentFeaturesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRetrieveAllManufacturersDelegate;
        
        private EndOperationDelegate onEndRetrieveAllManufacturersDelegate;
        
        private System.Threading.SendOrPostCallback onRetrieveAllManufacturersCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ActivityServiceClient() {
        }
        
        public ActivityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ActivityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActivityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActivityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<RetrieveAllActivityTypesCompletedEventArgs> RetrieveAllActivityTypesCompleted;
        
        public event System.EventHandler<RetrieveAllEquipmentCompletedEventArgs> RetrieveAllEquipmentCompleted;
        
        public event System.EventHandler<RetrieveAllEquipmentFeaturesCompletedEventArgs> RetrieveAllEquipmentFeaturesCompleted;
        
        public event System.EventHandler<RetrieveAllManufacturersCompletedEventArgs> RetrieveAllManufacturersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IndoorWorx.Library.ActivityServiceReference.IActivityService.BeginRetrieveAllActivityTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveAllActivityTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.ActivityType> IndoorWorx.Library.ActivityServiceReference.IActivityService.EndRetrieveAllActivityTypes(System.IAsyncResult result) {
            return base.Channel.EndRetrieveAllActivityTypes(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveAllActivityTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IndoorWorx.Library.ActivityServiceReference.IActivityService)(this)).BeginRetrieveAllActivityTypes(callback, asyncState);
        }
        
        private object[] OnEndRetrieveAllActivityTypes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.ActivityType> retVal = ((IndoorWorx.Library.ActivityServiceReference.IActivityService)(this)).EndRetrieveAllActivityTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveAllActivityTypesCompleted(object state) {
            if ((this.RetrieveAllActivityTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveAllActivityTypesCompleted(this, new RetrieveAllActivityTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveAllActivityTypesAsync() {
            this.RetrieveAllActivityTypesAsync(null);
        }
        
        public void RetrieveAllActivityTypesAsync(object userState) {
            if ((this.onBeginRetrieveAllActivityTypesDelegate == null)) {
                this.onBeginRetrieveAllActivityTypesDelegate = new BeginOperationDelegate(this.OnBeginRetrieveAllActivityTypes);
            }
            if ((this.onEndRetrieveAllActivityTypesDelegate == null)) {
                this.onEndRetrieveAllActivityTypesDelegate = new EndOperationDelegate(this.OnEndRetrieveAllActivityTypes);
            }
            if ((this.onRetrieveAllActivityTypesCompletedDelegate == null)) {
                this.onRetrieveAllActivityTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveAllActivityTypesCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveAllActivityTypesDelegate, null, this.onEndRetrieveAllActivityTypesDelegate, this.onRetrieveAllActivityTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IndoorWorx.Library.ActivityServiceReference.IActivityService.BeginRetrieveAllEquipment(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveAllEquipment(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Equipment> IndoorWorx.Library.ActivityServiceReference.IActivityService.EndRetrieveAllEquipment(System.IAsyncResult result) {
            return base.Channel.EndRetrieveAllEquipment(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveAllEquipment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IndoorWorx.Library.ActivityServiceReference.IActivityService)(this)).BeginRetrieveAllEquipment(callback, asyncState);
        }
        
        private object[] OnEndRetrieveAllEquipment(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Equipment> retVal = ((IndoorWorx.Library.ActivityServiceReference.IActivityService)(this)).EndRetrieveAllEquipment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveAllEquipmentCompleted(object state) {
            if ((this.RetrieveAllEquipmentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveAllEquipmentCompleted(this, new RetrieveAllEquipmentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveAllEquipmentAsync() {
            this.RetrieveAllEquipmentAsync(null);
        }
        
        public void RetrieveAllEquipmentAsync(object userState) {
            if ((this.onBeginRetrieveAllEquipmentDelegate == null)) {
                this.onBeginRetrieveAllEquipmentDelegate = new BeginOperationDelegate(this.OnBeginRetrieveAllEquipment);
            }
            if ((this.onEndRetrieveAllEquipmentDelegate == null)) {
                this.onEndRetrieveAllEquipmentDelegate = new EndOperationDelegate(this.OnEndRetrieveAllEquipment);
            }
            if ((this.onRetrieveAllEquipmentCompletedDelegate == null)) {
                this.onRetrieveAllEquipmentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveAllEquipmentCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveAllEquipmentDelegate, null, this.onEndRetrieveAllEquipmentDelegate, this.onRetrieveAllEquipmentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IndoorWorx.Library.ActivityServiceReference.IActivityService.BeginRetrieveAllEquipmentFeatures(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveAllEquipmentFeatures(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EquipmentFeatures> IndoorWorx.Library.ActivityServiceReference.IActivityService.EndRetrieveAllEquipmentFeatures(System.IAsyncResult result) {
            return base.Channel.EndRetrieveAllEquipmentFeatures(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveAllEquipmentFeatures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IndoorWorx.Library.ActivityServiceReference.IActivityService)(this)).BeginRetrieveAllEquipmentFeatures(callback, asyncState);
        }
        
        private object[] OnEndRetrieveAllEquipmentFeatures(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EquipmentFeatures> retVal = ((IndoorWorx.Library.ActivityServiceReference.IActivityService)(this)).EndRetrieveAllEquipmentFeatures(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveAllEquipmentFeaturesCompleted(object state) {
            if ((this.RetrieveAllEquipmentFeaturesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveAllEquipmentFeaturesCompleted(this, new RetrieveAllEquipmentFeaturesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveAllEquipmentFeaturesAsync() {
            this.RetrieveAllEquipmentFeaturesAsync(null);
        }
        
        public void RetrieveAllEquipmentFeaturesAsync(object userState) {
            if ((this.onBeginRetrieveAllEquipmentFeaturesDelegate == null)) {
                this.onBeginRetrieveAllEquipmentFeaturesDelegate = new BeginOperationDelegate(this.OnBeginRetrieveAllEquipmentFeatures);
            }
            if ((this.onEndRetrieveAllEquipmentFeaturesDelegate == null)) {
                this.onEndRetrieveAllEquipmentFeaturesDelegate = new EndOperationDelegate(this.OnEndRetrieveAllEquipmentFeatures);
            }
            if ((this.onRetrieveAllEquipmentFeaturesCompletedDelegate == null)) {
                this.onRetrieveAllEquipmentFeaturesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveAllEquipmentFeaturesCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveAllEquipmentFeaturesDelegate, null, this.onEndRetrieveAllEquipmentFeaturesDelegate, this.onRetrieveAllEquipmentFeaturesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IndoorWorx.Library.ActivityServiceReference.IActivityService.BeginRetrieveAllManufacturers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRetrieveAllManufacturers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Manufacturer> IndoorWorx.Library.ActivityServiceReference.IActivityService.EndRetrieveAllManufacturers(System.IAsyncResult result) {
            return base.Channel.EndRetrieveAllManufacturers(result);
        }
        
        private System.IAsyncResult OnBeginRetrieveAllManufacturers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((IndoorWorx.Library.ActivityServiceReference.IActivityService)(this)).BeginRetrieveAllManufacturers(callback, asyncState);
        }
        
        private object[] OnEndRetrieveAllManufacturers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Manufacturer> retVal = ((IndoorWorx.Library.ActivityServiceReference.IActivityService)(this)).EndRetrieveAllManufacturers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRetrieveAllManufacturersCompleted(object state) {
            if ((this.RetrieveAllManufacturersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RetrieveAllManufacturersCompleted(this, new RetrieveAllManufacturersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RetrieveAllManufacturersAsync() {
            this.RetrieveAllManufacturersAsync(null);
        }
        
        public void RetrieveAllManufacturersAsync(object userState) {
            if ((this.onBeginRetrieveAllManufacturersDelegate == null)) {
                this.onBeginRetrieveAllManufacturersDelegate = new BeginOperationDelegate(this.OnBeginRetrieveAllManufacturers);
            }
            if ((this.onEndRetrieveAllManufacturersDelegate == null)) {
                this.onEndRetrieveAllManufacturersDelegate = new EndOperationDelegate(this.OnEndRetrieveAllManufacturers);
            }
            if ((this.onRetrieveAllManufacturersCompletedDelegate == null)) {
                this.onRetrieveAllManufacturersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRetrieveAllManufacturersCompleted);
            }
            base.InvokeAsync(this.onBeginRetrieveAllManufacturersDelegate, null, this.onEndRetrieveAllManufacturersDelegate, this.onRetrieveAllManufacturersCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IndoorWorx.Library.ActivityServiceReference.IActivityService CreateChannel() {
            return new ActivityServiceClientChannel(this);
        }
        
        private class ActivityServiceClientChannel : ChannelBase<IndoorWorx.Library.ActivityServiceReference.IActivityService>, IndoorWorx.Library.ActivityServiceReference.IActivityService {
            
            public ActivityServiceClientChannel(System.ServiceModel.ClientBase<IndoorWorx.Library.ActivityServiceReference.IActivityService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRetrieveAllActivityTypes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveAllActivityTypes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.ActivityType> EndRetrieveAllActivityTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.ActivityType> _result = ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.ActivityType>)(base.EndInvoke("RetrieveAllActivityTypes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveAllEquipment(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveAllEquipment", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Equipment> EndRetrieveAllEquipment(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Equipment> _result = ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Equipment>)(base.EndInvoke("RetrieveAllEquipment", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveAllEquipmentFeatures(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveAllEquipmentFeatures", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EquipmentFeatures> EndRetrieveAllEquipmentFeatures(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EquipmentFeatures> _result = ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.EquipmentFeatures>)(base.EndInvoke("RetrieveAllEquipmentFeatures", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRetrieveAllManufacturers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RetrieveAllManufacturers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Manufacturer> EndRetrieveAllManufacturers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Manufacturer> _result = ((System.Collections.ObjectModel.ObservableCollection<IndoorWorx.Infrastructure.Models.Manufacturer>)(base.EndInvoke("RetrieveAllManufacturers", _args, result)));
                return _result;
            }
        }
    }
}
