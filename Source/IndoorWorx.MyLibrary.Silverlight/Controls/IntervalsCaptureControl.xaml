<UserControl x:Class="IndoorWorx.MyLibrary.Controls.IntervalsCaptureControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sdk="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk" 
    xmlns:toolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit"             
    xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation"     
    xmlns:converters="clr-namespace:IndoorWorx.Infrastructure.Converters;assembly=IndoorWorx.Infrastructure.Silverlight"
    xmlns:mlconverters="clr-namespace:IndoorWorx.MyLibrary.Converters"          
    xmlns:controls="clr-namespace:IndoorWorx.Infrastructure.Controls;assembly=IndoorWorx.Infrastructure.Silverlight"       
    xmlns:System="clr-namespace:System;assembly=mscorlib"             
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
	xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"             
    mc:Ignorable="d"
    d:DesignHeight="300" d:DesignWidth="400">
    <UserControl.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:IntegerToTimeSpanConverter x:Key="IntegerToTimeSpanConverter"/>
        <converters:CollectionSizeToVisibilityConverter x:Key="CollectionSizeToVisibilityConverter"/>
        <mlconverters:AlternatingRowBackgroundConverter 
            x:Key="AlternatingRowBackgroundConverter"
            NormalBrush="White"
	        AlternateBrush="#FFF9F9F9"/>
        <Style x:Key="DefaultText" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="Arial"/>
            <Setter Property="FontSize" Value="13" />
            <Setter Property="TextOptions.TextHintingMode" Value="Animated"/>
        </Style>
        <Style TargetType="TextBlock" BasedOn="{StaticResource DefaultText}"/>
        <Style x:Key="SmallTitle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="12" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="FontFamily" Value="Arial"/>
            <Setter Property="TextOptions.TextHintingMode" Value="Animated"/>
        </Style>
        <Style x:Key="MyLibraryTextBoxStyle" TargetType="TextBox">
            <Setter Property="FontFamily" Value="Arial"/>
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="TextOptions.TextHintingMode" Value="Animated"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="MinHeight" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="Margin" Value="0,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Grid x:Name="RootElement">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver"/>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="ReadOnly">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ReadOnlyVisualElement">
                                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="FocusStates">
                                    <VisualState x:Name="Focused">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FocusRectangle" />
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="FocusInnerRectangle"/>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Control.Padding)" Storyboard.TargetName="ContentElement">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Thickness>5</Thickness>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unfocused">
                                        <Storyboard/>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="ValidationStates">
                                    <VisualState x:Name="Valid"/>
                                    <VisualState x:Name="InvalidUnfocused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="ValidationErrorElement">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="InvalidFocused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="ValidationErrorElement">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen" Storyboard.TargetName="validationTooltip">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <System:Boolean>True</System:Boolean>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle x:Name="Base" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" Opacity="1" Fill="{TemplateBinding Background}" />
                            <Rectangle x:Name="FocusRectangle" StrokeThickness="{TemplateBinding BorderThickness}" Opacity="0" Stroke="{StaticResource TextBoxMouseOverBorderBrush}" d:IsHidden="True" />
                            <Rectangle x:Name="FocusInnerRectangle" StrokeThickness="{TemplateBinding BorderThickness}" Opacity="0" Margin="1" Stroke="{StaticResource TextBoxMouseOverInnerBorderBrush}" />
                            <Grid Margin="0">
                                <Border x:Name="ReadOnlyVisualElement" Background="{StaticResource ReadOnlyBrush}" Opacity="0"/>
                                <Grid>
                                    <ScrollViewer x:Name="ContentElement" BorderThickness="0" IsTabStop="False" Margin="0" VerticalAlignment="Center" Background="{x:Null}" Padding="0"/>
                                </Grid>
                            </Grid>
                            <Rectangle x:Name="DisabledVisualElement" Stroke="{StaticResource ControlsDisabledBrush}" StrokeThickness="{TemplateBinding BorderThickness}" Fill="{StaticResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0"/>
                            <Border x:Name="ValidationErrorElement" BorderBrush="{StaticResource ControlsValidationBrush}" BorderThickness="1" Visibility="Collapsed">
                                <ToolTipService.ToolTip>
                                    <ToolTip x:Name="validationTooltip" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource ValidationToolTipTemplate}">
                                        <ToolTip.Triggers>
                                            <EventTrigger RoutedEvent="Canvas.Loaded">
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible" Storyboard.TargetName="validationTooltip">
                                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                                <DiscreteObjectKeyFrame.Value>
                                                                    <System:Boolean>True</System:Boolean>
                                                                </DiscreteObjectKeyFrame.Value>
                                                            </DiscreteObjectKeyFrame>
                                                        </ObjectAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger>
                                        </ToolTip.Triggers>
                                    </ToolTip>
                                </ToolTipService.ToolTip>
                                <Grid Background="Transparent" HorizontalAlignment="Right" Height="12" Margin="1,-4,-4,0" VerticalAlignment="Top" Width="12">
                                    <Path Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z" Fill="{StaticResource ValidationBrush5}" Margin="1,3,0,0"/>
                                    <Path Data="M 0,0 L2,0 L 8,6 L8,8" Fill="{StaticResource WhiteColorBrush}" Margin="1,3,0,0"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MyLibraryTextBoxStyleIntervalData" TargetType="TextBox" BasedOn="{StaticResource MyLibraryTextBoxStyle}">
            <Setter Property="Margin" Value="0,0,0,5"/>
        </Style>

        <Style x:Key="MyLibraryTextBoxStyleIntervalItem" TargetType="TextBox" BasedOn="{StaticResource MyLibraryTextBoxStyle}">
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="TextOptions.TextHintingMode" Value="Animated"/>
        </Style>
        <Style x:Key="IntervalItemMetro" TargetType="controls:MetroContentControl">
            <Setter Property="Foreground" Value="#FF000000"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="controls:MetroContentControl">
                        <Grid x:Name="root" RenderTransformOrigin="0.5,0.5">
                            <Grid.RenderTransform>
                                <CompositeTransform/>
                            </Grid.RenderTransform>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="LayoutStates">
                                    <VisualState x:Name="AfterLoaded">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
													BeginTime="00:00:00"
													Storyboard.TargetProperty="(UIElement.Opacity)"
													Storyboard.TargetName="root">
                                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                                                <SplineDoubleKeyFrame KeyTime="00:00:00.400" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames
													BeginTime="00:00:00"
													Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)"
													Storyboard.TargetName="root">
                                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="-50"/>
                                                <EasingDoubleKeyFrame KeyTime="00:00:00.700" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut"/>
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="AfterUnLoaded">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
													BeginTime="00:00:00"
													Storyboard.TargetProperty="(UIElement.Opacity)"
													Storyboard.TargetName="root">
                                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                                <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames
													BeginTime="00:00:00"
													Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)"
													Storyboard.TargetName="root">
                                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                                                <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="-50"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="BeforeLoaded"/>
                                    <VisualState x:Name="BeforeUnloaded"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter
									Cursor="{TemplateBinding Cursor}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									Content="{TemplateBinding Content}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									Margin="{TemplateBinding Padding}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <DataTemplate x:Key="IntervalItemTemplate">
            <Grid Background="Transparent">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseEnter">
                        <ei:GoToStateAction StateName="MouseOver"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeave">
                        <ei:GoToStateAction StateName="MouseOut"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="MouseVisualStateGroup">
                        <VisualStateGroup.Transitions>
                            <VisualTransition GeneratedDuration="0:0:0.5">
                                <VisualTransition.GeneratedEasingFunction>
                                    <CubicEase EasingMode="EaseInOut"/>
                                </VisualTransition.GeneratedEasingFunction>
                            </VisualTransition>
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="button">
                                    <DiscreteObjectKeyFrame KeyTime="0">
                                        <DiscreteObjectKeyFrame.Value>
                                            <System:Boolean>True</System:Boolean>
                                        </DiscreteObjectKeyFrame.Value>
                                    </DiscreteObjectKeyFrame>
                                </ObjectAnimationUsingKeyFrames>
                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="button" d:IsOptimized="True"/>
                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="button" d:IsOptimized="True"/>
                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="comboBox" d:IsOptimized="True"/>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="MouseOut">
                            <Storyboard>
                                <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="button" d:IsOptimized="True"/>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="button">
                                    <DiscreteObjectKeyFrame KeyTime="0">
                                        <DiscreteObjectKeyFrame.Value>
                                            <System:Boolean>False</System:Boolean>
                                        </DiscreteObjectKeyFrame.Value>
                                    </DiscreteObjectKeyFrame>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup>
                    <VisualStateGroup x:Name="LayoutVisualStateGroup">
                        <VisualStateGroup.Transitions>
                            <VisualTransition GeneratedDuration="0:0:0.7"/>
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="Loaded">
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <VisualStateManager.CustomVisualStateManager>
                    <ei:ExtendedVisualStateManager/>
                </VisualStateManager.CustomVisualStateManager>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
						BorderBrush="{StaticResource PageBorderBrush}"
						BorderThickness="0,0,1,1"
						Grid.Row="2"
						Grid.Column="0"/>
                <Border
						BorderBrush="{StaticResource PageBorderBrush}"
						BorderThickness="0,0,1,1"
						Grid.Row="2"
						Grid.Column="1"
						Width="110"/>
                <Border
						BorderBrush="{StaticResource PageBorderBrush}"
						BorderThickness="0,0,1,1"
						Grid.Row="2"
						Grid.Column="2"
						Width="110"/>
                <Border
						BorderBrush="{StaticResource PageBorderBrush}"
						BorderThickness="0,0,0,1"
						Grid.Row="2"
						Grid.Column="3"
						Width="110"/>
                <controls:MetroContentControl>
                    <Grid Margin="10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Button
								x:Name="button"
                                Command="{Binding DataContext.RemoveIntervalCommand, ElementName=LayoutRoot}"
                                CommandParameter="{Binding}"
								Style="{StaticResource RoundButton}"
								Margin="0,0,15,0"
								Width="24"
								Height="24"
								RenderTransformOrigin="0.5,0.5">
                            <Button.RenderTransform>
                                <CompositeTransform TranslateX="-50"/>
                            </Button.RenderTransform>
                            <Image Source="/IndoorWorx.MyLibrary.Silverlight;component/Images/delete.png" Stretch="Fill" Width="24" Height="24" ToolTipService.ToolTip="Delete Item"/>
                        </Button>
                        <telerik:RadComboBox x:Name="comboBox" Margin="0" 
                            Grid.Column="1" 
                            Grid.RowSpan="2"
                            ItemsSource="{Binding DataContext.IntervalTypes, Mode=OneWay, ElementName=LayoutRoot}" 
                            DisplayMemberPath="Name" 
                            SelectedItem="{Binding IntervalType, Mode=TwoWay}"
                            RenderTransformOrigin="0.5,0.5">
                            <telerik:RadComboBox.RenderTransform>
                                <CompositeTransform TranslateX="-39"/>
                            </telerik:RadComboBox.RenderTransform>
                        </telerik:RadComboBox>
                    </Grid>
                </controls:MetroContentControl>
                <controls:MetroContentControl						
						Grid.Row="2"
						Grid.Column="1">
                    <TextBox
							x:Name="durationTextBox"
							Text="{Binding Duration, Mode=TwoWay}"
							Style="{StaticResource MyLibraryTextBoxStyleIntervalItem}"	
							HorizontalAlignment="Right"
							VerticalAlignment="Top"
							Margin="10"/>
                </controls:MetroContentControl>
                <controls:MetroContentControl						
						Grid.Row="2"
						Grid.Column="2">
                    <TextBox
							x:Name="repeatsTextBox"
							Text="{Binding Repeats, Mode=TwoWay, StringFormat=\{0:N0\}}"
							Style="{StaticResource MyLibraryTextBoxStyleIntervalItem}"
							HorizontalAlignment="Right"
							VerticalAlignment="Top"
							Margin="10">
                    </TextBox>
                </controls:MetroContentControl>
                <controls:MetroContentControl						
						Grid.Row="2"
						Grid.Column="3">
                    <TextBox
							x:Name="riTextBox"
							Text="{Binding RecoveryInterval, Mode=TwoWay}"
							Style="{StaticResource MyLibraryTextBoxStyleIntervalItem}"	
							HorizontalAlignment="Right"
							VerticalAlignment="Top"
							Margin="10"/>
                </controls:MetroContentControl>
            </Grid>
        </DataTemplate>
        <Style x:Key="IntervalsListBoxItemStyle" TargetType="ListBoxItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Grid Background="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource AlternatingRowBackgroundConverter}}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="LayoutStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.5">
                                            <VisualTransition.GeneratedEasingFunction>
                                                <CubicEase EasingMode="EaseInOut"/>
                                            </VisualTransition.GeneratedEasingFunction>
                                        </VisualTransition>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="AfterLoaded">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.Projection).(PlaneProjection.RotationX)" Storyboard.TargetName="contentPresenter" d:IsOptimized="True"/>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" d:IsOptimized="True"/>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="contentPresenter" d:IsOptimized="True"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="BeforeLoaded"/>
                                    <VisualState x:Name="BeforeUnloaded"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter x:Name="contentPresenter" RenderTransformOrigin="0.5,0.5" Opacity="0">
                                <ContentPresenter.RenderTransform>
                                    <CompositeTransform TranslateX="-20"/>
                                </ContentPresenter.RenderTransform>
                                <ContentPresenter.Projection>
                                    <PlaneProjection/>
                                </ContentPresenter.Projection>
                            </ContentPresenter>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid x:Name="LayoutRoot">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="VisualStateGroup">
                <VisualStateGroup.Transitions>
                    <VisualTransition GeneratedDuration="0:0:0.7">
                        <VisualTransition.GeneratedEasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </VisualTransition.GeneratedEasingFunction>
                    </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="MouseOverTemplateItems">
                    <Storyboard>
                        <DoubleAnimation Duration="0" To="-10" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="AddLineItem" d:IsOptimized="True"/>
                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="AddLineItem" d:IsOptimized="True"/>
                    </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseOutTemplateItems"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="MouseEnter">
                <ei:GoToStateAction StateName="MouseOverTemplateItems"/>
            </i:EventTrigger>
            <i:EventTrigger EventName="MouseLeave">
                <ei:GoToStateAction StateName="MouseOutTemplateItems"/>
            </i:EventTrigger>
        </i:Interaction.Triggers>
        <Grid Margin="30,25,30,20">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <!--
					Headers
				-->
            <Border
    					BorderBrush="{StaticResource PageBorderBrush}"
    					BorderThickness="0,0,0,1"
    					Grid.ColumnSpan="4"/>
            <Border
    					BorderBrush="{StaticResource PageBorderBrush}"
    					BorderThickness="0,0,1,0"
    					Grid.Column="0"/>
            <Border
    					BorderBrush="{StaticResource PageBorderBrush}"
    					BorderThickness="0,0,1,0"
    					Grid.Column="1"
    					Width="110"/>
            <Border
    					BorderBrush="{StaticResource PageBorderBrush}"
    					BorderThickness="0,0,1,0"
    					Grid.Column="2"
    					Width="110"/>
            <Border
    					BorderBrush="{StaticResource PageBorderBrush}"
    					BorderThickness="0,0,0,0"
    					Grid.Column="3"
    					Width="110"/>
            <TextBlock
    					Text="{Binding MyLibraryResources.IntervalTypeLabel, Source={StaticResource MyLibraryResources}}"
    					Style="{StaticResource SmallTitle}"
    					Margin="10,0,0,2"/>
            <TextBlock
    					Text="{Binding MyLibraryResources.DurationLabel, Source={StaticResource MyLibraryResources}}"
    					Style="{StaticResource SmallTitle}"
    					Grid.Column="1" HorizontalAlignment="Right" Margin="0,0,10,0"/>
            <TextBlock
    					Text="{Binding MyLibraryResources.NumberOfRepeatsLabel, Source={StaticResource MyLibraryResources}}"
    					Style="{StaticResource SmallTitle}"
    					Grid.Column="2" HorizontalAlignment="Right" Margin="0,0,10,0"/>
            <TextBlock
    					Text="{Binding MyLibraryResources.RecoveryIntervalLabel, Source={StaticResource MyLibraryResources}}"
    					Style="{StaticResource SmallTitle}"
    					HorizontalAlignment="Right"
    					Grid.Column="3" Margin="0,0,10,0"/>

                <ListBox
    					x:Name="IntervalItems"
                        Grid.Row="1" Grid.ColumnSpan="4"
    					ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                        ScrollViewer.VerticalScrollBarVisibility="Auto"    					
    					ItemTemplate="{StaticResource IntervalItemTemplate}"
    					ItemContainerStyle="{StaticResource IntervalsListBoxItemStyle}"
    					Padding="0"/>
        </Grid>
        <Button
    		x:Name="AddLineItem"
    		Style="{StaticResource RoundButton}"
            Command="{Binding DataContext.AddIntervalCommand, ElementName=LayoutRoot}"
            HorizontalAlignment="Left" Width="48" Height="48" VerticalAlignment="Top" Margin="0" RenderTransformOrigin="0.5,0.5" Opacity="0">
            <Button.RenderTransform>
                <CompositeTransform TranslateX="-30"/>
            </Button.RenderTransform>
            <Image Height="48" Source="/IndoorWorx.MyLibrary.Silverlight;component/Images/new.png" Stretch="Fill" Width="48"/>
        </Button>
        <!--<ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
            <ItemsControl x:Name="IntervalItems">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="5"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <sdk:Label Content="{Binding MyLibraryResources.DurationLabel, Source={StaticResource MyLibraryResources}}" FontWeight="SemiBold"/>
                                <StackPanel Grid.Column="1" Orientation="Horizontal">
                                    <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding IntervalDuration.Minutes, Mode=TwoWay}"/>
                                    <sdk:Label Content="{Binding MyLibraryResources.MinutesLabel, Source={StaticResource MyLibraryResources}}"/>
                                    <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding IntervalDuration.Seconds, Mode=TwoWay}"/>
                                    <sdk:Label Content="{Binding MyLibraryResources.SecondsLabel, Source={StaticResource MyLibraryResources}}"/>
                                </StackPanel>
                                <sdk:Label Content="{Binding MyLibraryResources.IntervalTypeLabel, Source={StaticResource MyLibraryResources}}" Grid.Column="3" FontWeight="SemiBold"/>
                                <ComboBox Margin="2" Grid.Column="4" HorizontalAlignment="Stretch" ItemsSource="{Binding DataContext.IntervalTypes, Mode=OneWay, ElementName=LayoutRoot}" DisplayMemberPath="Name" SelectedItem="{Binding IntervalType, Mode=OneWay}"/>                                                                                                
                                <sdk:Label Content="{Binding MyLibraryResources.NumberOfRepeatsLabel, Source={StaticResource MyLibraryResources}}" Grid.Row="1" FontWeight="SemiBold"/>
                                <toolkit:NumericUpDown Margin="2" Grid.Column="1" Grid.Row="1" HorizontalAlignment="Left" Width="50" Value="{Binding Repeats, Mode=TwoWay}"/>
                                <sdk:Label Content="{Binding MyLibraryResources.RecoveryIntervalLabel, Source={StaticResource MyLibraryResources}}" Grid.Row="1" Grid.Column="3" FontWeight="SemiBold"/>
                                <StackPanel Grid.Row="1" Grid.Column="4" Orientation="Horizontal">
                                    <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding RecoveryInterval.Minutes, Mode=TwoWay}"/>
                                    <sdk:Label Content="{Binding MyLibraryResources.MinutesLabel, Source={StaticResource MyLibraryResources}}"/>
                                    <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding RecoveryInterval.Seconds, Mode=TwoWay}"/>
                                    <sdk:Label Content="{Binding MyLibraryResources.SecondsLabel, Source={StaticResource MyLibraryResources}}"/>
                                </StackPanel>
                            </Grid>
                            <toolkit:Expander Grid.Row="1" Header="{Binding MyLibraryResources.OptionsLabel, Source={StaticResource MyLibraryResources}}" IsTabStop="False">
                                <StackPanel>
                                    <TextBlock Text="{Binding MyLibraryResources.CountDownsHeader, Source={StaticResource MyLibraryResources}}" FontWeight="SemiBold" Margin="2"/>
                                    <StackPanel Orientation="Horizontal">
                                        <sdk:Label Content="{Binding MyLibraryResources.CountDownToStartOfIntervalLabel, Source={StaticResource MyLibraryResources}}" Width="200"/>
                                        <CheckBox Margin="2" IsChecked="{Binding ToStart.IsActive, Mode=TwoWay}"/>
                                    </StackPanel>
                                    <StackPanel Visibility="{Binding ToStart.IsActive, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <StackPanel Orientation="Horizontal">
                                            <sdk:Label Content="{Binding MyLibraryResources.FromLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding ToStart.Duration.Minutes, Mode=TwoWay}"/>
                                            <sdk:Label Content="{Binding MyLibraryResources.MinutesLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding ToStart.Duration.Seconds, Mode=TwoWay}"/>
                                            <sdk:Label Content="{Binding MyLibraryResources.SecondsLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <sdk:Label Content="{Binding MyLibraryResources.EveryLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding ToStart.Tick.Minutes, Mode=TwoWay}"/>
                                            <sdk:Label Content="{Binding MyLibraryResources.MinutesLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding ToStart.Tick.Seconds, Mode=TwoWay}"/>
                                            <sdk:Label Content="{Binding MyLibraryResources.SecondsLabel, Source={StaticResource MyLibraryResources}}"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <sdk:Label Content="{Binding MyLibraryResources.StartIntervalMessageLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <TextBox Text="{Binding ToStart.EndMessage, Mode=TwoWay}" Margin="2" Width="350"/>
                                        </StackPanel>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <sdk:Label Content="{Binding MyLibraryResources.CountDownToEndOfIntervalLabel, Source={StaticResource MyLibraryResources}}" Width="200" />
                                        <CheckBox Margin="2" VerticalContentAlignment="Center" IsChecked="{Binding ToEnd.IsActive, Mode=TwoWay}"/>
                                    </StackPanel>
                                    <StackPanel Visibility="{Binding ToEnd.IsActive, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <StackPanel Orientation="Horizontal">
                                            <sdk:Label Content="{Binding MyLibraryResources.FromLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding ToEnd.Duration.Minutes, Mode=TwoWay}"/>
                                            <sdk:Label Content="{Binding MyLibraryResources.MinutesLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding ToEnd.Duration.Seconds, Mode=TwoWay}"/>
                                            <sdk:Label Content="{Binding MyLibraryResources.SecondsLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <sdk:Label Content="{Binding MyLibraryResources.EveryLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding ToEnd.Tick.Minutes, Mode=TwoWay}"/>
                                            <sdk:Label Content="{Binding MyLibraryResources.MinutesLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <toolkit:NumericUpDown Margin="2" Width="50" Value="{Binding ToEnd.Tick.Seconds, Mode=TwoWay}"/>
                                            <sdk:Label Content="{Binding MyLibraryResources.SecondsLabel, Source={StaticResource MyLibraryResources}}"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <sdk:Label Content="{Binding MyLibraryResources.EndIntervalMessageLabel, Source={StaticResource MyLibraryResources}}"/>
                                            <TextBox Text="{Binding ToEnd.EndMessage, Mode=TwoWay}" Margin="2" Width="350"/>
                                        </StackPanel>
                                    </StackPanel>
                                </StackPanel>
                            </toolkit:Expander>
                            <StackPanel Orientation="Horizontal" Grid.Row="2" Margin="2">
                                <Button x:Name="AddIntervalButton" Margin="0,0,0,2" BorderThickness="0" IsTabStop="False" Command="{Binding DataContext.AddIntervalCommand, ElementName=LayoutRoot}" CommandParameter="{Binding}">
                                    <Image Source="/IndoorWorx.MyLibrary.Silverlight;component/Images/add.png" Width="16"/>
                                </Button>
                                <Button x:Name="MoveUpButton" Margin="2,0,0,2" BorderThickness="0" IsTabStop="False" Command="{Binding DataContext.MoveUpCommand, ElementName=LayoutRoot}" CommandParameter="{Binding}">
                                    <Image Source="/IndoorWorx.MyLibrary.Silverlight;component/Images/moveup.png" Width="16"/>
                                </Button>
                                <Button x:Name="MoveDownButton" Margin="2,0,0,2" BorderThickness="0" IsTabStop="False" Command="{Binding DataContext.MoveDownCommand, ElementName=LayoutRoot}" CommandParameter="{Binding}">
                                    <Image Source="/IndoorWorx.MyLibrary.Silverlight;component/Images/movedown.png" Width="16"/>
                                </Button>
                                <Button x:Name="DeleteIntervalButton" Margin="2,0,0,0" BorderThickness="0" Command="{Binding DataContext.RemoveIntervalCommand, ElementName=LayoutRoot}" CommandParameter="{Binding}">
                                    <Image Source="/IndoorWorx.MyLibrary.Silverlight;component/Images/delete.png" Width="16"/>
                                </Button>
                            </StackPanel>
                            <toolkit:Separator Grid.Row="3" Margin="2"/>
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>-->
        <!--<Button
    		x:Name="AddLineItem"
    		Style="{StaticResource RoundButton}"
            Command="{Binding DataContext.AddIntervalCommand, ElementName=LayoutRoot}"
            HorizontalAlignment="Left" Width="48" Height="48" VerticalAlignment="Top" Margin="0" RenderTransformOrigin="0.5,0.5" Opacity="0">
            <Button.RenderTransform>
                <CompositeTransform TranslateX="-30"/>
            </Button.RenderTransform>
            <Image Height="48" Source="/IndoorWorx.MyLibrary.Silverlight;component/Images/new.png" Stretch="Fill" Width="48"/>
        </Button>-->
    </Grid>
</UserControl>
